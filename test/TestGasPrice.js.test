//time advance ref: https://github.com/ejwessel/TimeContract
const EasyMoneyRacing = artifacts.require("./EasyMoneyRacing");
const helper = require("../utils/timeAdvanceUtils");

// https://github.com/OpenZeppelin/openzeppelin-test-helpers
const {
  } = require('@openzeppelin/test-helpers');
const { web3 } = require("@openzeppelin/test-helpers/src/setup");


contract("EasyMoneyRacing", (accounts) => {
    let easyMoneyRacing;
    let endBlock;
    let deployedBlock;
    // let snapshot = {};
    let snapshotContainer = new Object();
    // What is before after beforeeach aftereach?
    // https://stackoverflow.com/questions/21418580/what-is-the-difference-between-before-and-beforeeach
    before("deploy EasyMoneyRacing Contract", async() => {
        // easyMoneyRacing = await EasyMoneyRacing.new();
        // easyMoneyRacing = await EasyMoneyRacing.deployed();
        easyMoneyRacing = await EasyMoneyRacing.new({from:accounts[0]});
        // Snapshot can be used only once. https://spectrum.chat/trufflesuite/ganache/why-can-a-snapshot-only-be-used-once~250c8770-0ca3-4a54-9ded-8975740048eb
    });

    it("End block expect to be deployed block + 100.", async () => {
        endBlock = (await easyMoneyRacing.endBlock.call()).toNumber();
        const txBlock = await EasyMoneyRacing.web3.eth.getTransaction(easyMoneyRacing.transactionHash);
        deployedBlock = txBlock.blockNumber;
        console.log("End block number     :" + endBlock);
        console.log("Deployed block number:" + txBlock.blockNumber);
        assert.strictEqual(txBlock.blockNumber + 100, endBlock, "Contract did not meet the expect");
    });

    describe("Test Gas for curiosity.", async () => {

        before("Snapshot before test senario", async() => {
            snapshot = await helper.takeSnapshot();
            snapshotContainer.deployed = snapshot['result'];
        });

        after("Revert to block before test senario", async() => {
            await helper.revertToSnapshot(snapshotContainer.deployed);
        });

        it("Init state", async () => {
            for(let i = 0; i< 50; i++){
                await easyMoneyRacing.sendMoney({value:1000 + i,  from: accounts[i]});
            }
            for(let i = 50; i< 100; i++){
                await easyMoneyRacing.sendMoney({value:1099 - i,  from: accounts[i]});
            }
        });

        it("Function using Math utils", async () => {
            snapshot = await helper.takeSnapshot();
            snapshotContainer.test = snapshot['result'];
            let winner = await easyMoneyRacing.setName("", { from: accounts[49]});
            console.log(winner);
        });

        it("Function without using Math utils", async () => {
            await helper.revertToSnapshot(snapshotContainer.test);
            winner = await easyMoneyRacing.setNameWithoutMathUtils("", { from: accounts[49]});
            console.log(winner);
        });

    });
});